"(begin (define f (lambda (x) (+ x 10))) (define result (f (car '(50 34 567 433 22 23 2345 \"ok\" (6 87 6))))) result)"


(begin (let ((i 1)) (define f (make-closure (lambda (y) (begin (set! i (+ i y)) i))))) (define val1 (f 1)) (define val2 (f 1)) (+ val1 val2))

(begin (let ((i 0)) (define f (lambda (y) (begin (set! i (+ i y)) i)))) (define val1 (f 1)) (define val2 (f 1)) (+ val1 val2))


(begin   
  (let ((i 1))                       
    (define f 								
      (make-closure 
        (lambda (y) 
          (begin (set! i (+ i y)) i) 	 
        )
      )
    )
  )
  (define val1 (f 1))
  (define val2 (f 1))
  (- val1 val2) 
)





-- if         OK
-- ifSemElse  OK
-- recursion  
-- let        OK        
-- set!       OK       
-- comment    OK
-- cons       OK 
-- lt?        OK
-- /          OK
-- mod        OK
-- eqv?       OK  
-- clausuras  1/2
-- lambda     OK
-- car        OK
-- cdr        OK



-- esse caso pega a String
"(begin (comment asudh asdhuas asdhiuas asdhiuasd) (eqv? \"a\" \"a\"))"

"(begin (define f (lambda (a) (+ a 1))) (define x (if (lt? (f 5) 10) 4 5)) x)"

"(begin (define lista '(5 10 15 20)) (define lista2 '(25 30 35)) (define lista3 (cons (car lista) (cdr lista2))) lista3)"

-- dá erro esperado no if sem else pois não existe o else (unspecified)
"(begin (define f (if (eqv? (mod 8 2) 1) 6)) f)"


"(begin (define x 10) (let ((x 1) (z 10)) (begin (define y (+ x 50)))) (+ x y))"


"(begin (define x 5) (let ((x 15) (a 10) (b 20)) (begin (define y (+ a b x)) (define z (/ y x)))) (* x z))"


"(begin (let ((a 2) (b 10)) (define g (make-closure (lambda (y) (begin (set! a (- y (+ a b))) a) )))) (define res1 (g 14)) (define res2 (g 8)) (- res1 res2))"


--dando not a number
"(begin (let ((m 3) (n 9)) (define f (lambda (z) (begin (+ (* z n) m))))) (define h (f 2)))"


-- sem o closure (professor!)
"(begin (let ((i 0)) (define f (lambda (y) (begin (set! i (+ i y)) i)))) (define val1 (f 1)) (define val2 (f 1)) (+ val1 val2))"



















